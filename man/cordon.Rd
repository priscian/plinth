% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/function.R
\name{cordon}
\alias{cordon}
\title{Evaluate Function inside an Environment and Extract and Save Any Useful Variables from Its Body}
\usage{
cordon(
  fun,
  ...,
  arguments = list(),
  envir = environment(),
  file_path = NULL,
  variables = NULL,
  copy_args = FALSE,
  timestamp = TRUE,
  timestamp... = list(),
  action = c("run", "save", "load", "skip", "archive"),
  evaluate_dots = TRUE,
  create_path_dir = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{fun}{The function to be evaluated.}

\item{...}{Arguments to be passed into \code{fun}.}

\item{arguments}{A list of additional arguments for passing into \code{fun}; can be used e.g. when the formal arguments of \code{fun} conflict with those of the current function.}

\item{envir}{Environment where \code{variables} will be copied after \code{fun} has been evaluated. For \code{action = "save"}, also names what variables in the evaluation environment will be \code{save()}d to an external file.}

\item{file_path}{For \code{action = c("save", "load")}, the path to the file to which the \code{variables} in \code{envir} will be written, or from which objects will be extracted to \code{envir}. If \code{timestamp = TRUE}, the file name provides a base name to which a timestamp is appended.}

\item{variables}{A character string naming variables among the arguments to, or in the body of, \code{fun} that will be extracted from the evaluation environment. If any of the strings are named, those names with carry the variables' values in \code{envir}.}

\item{copy_args}{Logical: Should all named arguments to \code{fun} also be extracted from the evaluation environment (and for \code{action = "save"}, saved)?}

\item{timestamp}{A logical value deciding whether a current timestamp (default format \code{\%Y-\%m-\%d+[seconds after midnight]}) should be appended to the base file name given as part of \code{file_path}.}

\item{action}{A character string denoting the purpose of calling \code{cordon()} in the first place:
\tabular{ll}{
  run \tab Evaluate \code{fun} and extract variables, but don't load or save them. \cr
  save \tab Evaluate \code{fun}, extract variables, and save them to an external file. \cr
  load \tab Load saved data from \code{file_path}. If \code{timestamp = TRUE}, load the most recent version according to the timestamped file name. \cr
  skip \tab Do nothing, i.e. prevent \code{fun} from being evaluated at all. \cr
  archive \tab Not implemented.
}}
}
\value{
The environment in which the body of \code{fun} was evaluated.
}
\description{
Puts a function's body and its arguments into an environment for evaluation, and afterwards allows extraction of any variables from the body, not just a return value.
}
\examples{
\dontrun{
f <- function(x = "frog", ...) { args <- get_dots(...)$arguments; nines <- args$beast + 333; bite <- args$bite; return (nop()) }
e <- cordon(f, bite = "me", 3.14, beast = 666, TRUE, envir = globalenv(), variables = "nines")
get("nines", envir = globalenv())
e$bite
ls(e, all = TRUE)
}

}
